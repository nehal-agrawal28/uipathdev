/**
 * Acts as the factory to create Rule generation services.
 * 1.0 Girish Lakshmanan 23/08/2019 Initial Version
 *
 * @author Girish Lakshmanan
 * @date 23/08/2019
 *
 */

public with sharing class ApprovalRuleServiceFactory {
  public static List<Id> generate(List<Id> sourceRecordIds) {
    return service().generate(sourceRecordIds);
  }

  private static IApprovalRuleGenerationService service() {
    return (IApprovalRuleGenerationService) new DefaultApprovalRuleGenerationService();
  }

  /**
   * Interface implemented by domain classes that support the ability to produce ApprovalRules
   **/
  public interface ISupportApprovalRuleGeneration {
    void generate(ApprovalRuleFactory ApprovalRuleFactory);
  }

  /**
   * Methods on this factory will help create and register with the transactionWork ApprovalRules
   */
  public class ApprovalRuleFactory {
    private TransactionManager transactionWork;
    private DefaultApprovalMatrixRuleMapper service;

    /**
     * List of ApprovalRules generated by the factory
     **/
    public List<sbaa__ApprovalRule__c> approvalRules { get; private set; }

    public ApprovalRuleFactory(TransactionManager transactionWork, DefaultApprovalMatrixRuleMapper service) {
      this.transactionWork = transactionWork;
      this.approvalRules = new List<Sbaa__ApprovalRule__c>();
      this.service = service;
    }

    public void add(ApprovalRuleMatrix__c matrixRecord) {
      sbaa__ApprovalRule__c approvalRule = service.buildRule(matrixRecord);

      transactionWork.registerUpsert(approvalRule);

      List<sbaa__ApprovalCondition__c> conditions = service.buildConditions(matrixRecord);
      for (sbaa__ApprovalCondition__c condition : conditions) {
        // Though registered as new, this will trigger an upsert because External Id is sent with a non-null value
        transactionWork.registerNew(condition, sbaa__ApprovalCondition__c.Sbaa__ApprovalRule__c, approvalRule);
      }

      approvalRules.add(approvalRule);
    }
  }
}